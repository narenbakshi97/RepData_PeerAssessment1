x=6
if(x>7){
x=x+1
}else if(x>8){
x=x+2
}else {
x=x+3}
print(x)
n = 5
sum = 1
while(n!=0)
{
sum = sum*n
print(sum)
n = n - 1
if(sum > 50)
{
print("Itâ€™s gonna rain")
}
else
{
print("Itâ€™s not gonna rain")
}
}
n=100
sum=0
for(i in seq(1,n,1)){
sum=sum+i
print(c(i,sum))
if(sum>15)
break
}
x1<-matrix(1:9,3,3)
x2<-matrix(11:19,3,3)
m = rbind(apply(x1,1,sum),apply(x2,1,sum))
y = apply(m,1,mean)
print(y)
x = c(1:4)
y = c(6,7)
print(x + y)
install.packages(swirl)
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label =  TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989n May 17")
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
mdy("1922012")
mdy("122012")
mdy("1920/12")
mdy("1920/1/2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("3:22:14")
hms("03:22:14")
dt2
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 8, minutes = 46, seconds = 55)
update(this_moment, hours = 10, minutes = 16, seconds = 55)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
now("America/New_York")
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hour(15) + minute(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("06-17-08", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
plot(pm25, latitude)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd= 2, lty = 2)
plot(pollution$latitude, ppm, col= pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region =="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
swirl*()
swirl()
swirl()
dev.cur()
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$dist),max(cars$dist), "SWIRL rules!")
text(mean(cars$speed),max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$ozone, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
par("length")
length(oar())
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, airquality$Ozone, typr = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, airquality$Month == 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col = "blue", pch = 2)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
par("pch")
?pch
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par("mfrow" = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, title="Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main ="Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
swirl()
swirl()
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
sub1 <- dist(ssd[,10:12])
sub1 <- subset(ssd, subject == 1)
mydist <- subset(ssd, subject == 1)
mydist <- dist(ssd, subject == 1)
mydist <- dist(sub1[,10:12])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c()])
kClust <- kmeans(sub1[,-c(-1,-2)])
kClust <- kmeans(sub1[,-c(-1,-2)],centers=6)
kClust <- kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)],centers=6,nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="walkdown Cluster")
plot(kClust$centers[walkdown,1:12],pch=19,ylab="walkdown Cluster")
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
setwd("H:/Code/coursera/Johns Hopkins/DS specialization/course 5/week 2/RepData_PeerAssessment1")
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
```{r}
# The libraries
library(ggplot2)
```
## Loading and preprocessing the data
```{r}
if(!file.exists("activity.csv")){
unzip(zipfile = "activity.zip")
}
df <- read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
#### 1. Calculate the total number of steps taken per day
```{r}
x1 <- tapply(df$steps, df$date, sum, na.rm = TRUE)
x1 <- x1[!is.na(x1)]
```
#### 2. Make a histogram of the total number of steps taken each day
```{r}
qplot(x1,main = "Total steps per day", binwidth=500,xlab="total steps",ylab="frequency")
```
#### 3. Calculate and report the mean and median of the total number of steps taken per day
```{r}
# the mean
mean_x1 <- mean(x1)
median_x1 <- median(x1)
```
Mean is: `r mean_x1` Steps
Median is: `r median_x1` Steps
x2 <- tapply(df$steps,df$interval, mean, na.rm=TRUE)
x2
max(x2)
names(x2)
names(x2)[max(x2)]
max(x2)
names(x2)[max(x2)]
x2[max(x2)]
max(x2)
names(max(x2))
max(x2)
a < x2[x2 == max(x2)]
a <- x2[x2 == max(x2)]
a
names(a)
x2
qplot(x = names(x2), y = x2, gtype = c("line"))
qplot(x = names(x2), y = x2, type = c("line"))
qplot(x = names(x2), y = x2, geom = c("line"))
qplot(x = names(x2), y = x2)
ggplot(x = names(x2), y = x2)+geom_line()
x2 <- aggregate(df$steps,list(df$interval), mean, na.rm=TRUE)
colnames(x2) <- c("Interval","Steps")
ggplot(data = aes(x = x2$Interval, y = x2$Steps))+geom_line()
ggplot(data = df, aes(x = x2$Interval, y = x2$Steps))+geom_line()
ggplot(data = x2, aes(x = x2$Interval, y = x2$Steps))+geom_line()
ggplot(data = x2, aes(x = Interval, y = Steps))+geom_line()
# finding out the maximum
maximum_steps <- max(x2$Steps)
a <- x2$Interval[x2$Steps == maximum_steps]
# no. of missing vals in a dataset
na_vals <- sum(is.na(df))
na_vals
head(df)
df[is.na(df$interval),]
df[is.na(df$date),]
df[is.na(df$steps),]
sum(is.na(df$steps))
# first we will create a variable that stores ther median value by each date
medians <- aggregate(df$steps, list(df$date), median, na.rm = TRUE)
medians
# first we will create a variable that stores ther median value by each date
medians <- tapply(df$steps, df$date, median, na.rm = TRUE)
# first we will create a variable that stores ther median value by each date
medians
df$$steps
df$steps
table(df$steps)
mean(df$steps)
mean(df$steps,na.rm = TRUE)
median(df$steps,na.rm = TRUE)
# first we will create a variable that stores ther mean value by each date
means <- tapply(df$steps, df$date, mean, na.rm = TRUE)
# first we will create a variable that stores ther mean value by each date
means <- tapply(df$steps, df$date, mean, na.rm = TRUE)
means
# first we will create a variable that stores ther mean value by each date
means <- aggregate(df$steps, list(df$date), mean, na.rm = TRUE)
means
colnames(means) <- c("Date","Steps")
means$Steps[is.na(means$Steps),]
means[is.na(means$Steps),]
# Still there are some dates which do not have collected data at all on all intervals, so we will change it from NaN to 0
means$Steps[is.na(means$Steps),] = 0
# Still there are some dates which do not have collected data at all on all intervals, so we will change it from NaN to 0
means$Steps[is.na(means$Steps)] = 0
means
# Now, we 'll assign the mean values to each NA val of df dataframe
for(row in df){
if(row$)
# Now, we 'll assign the mean values to each NA val of df dataframe
for(row in df){
}
row$Date
# Now, we 'll assign the mean values to each NA val of df dataframe
if(df$date == means$Date & is.na(df$steps)){
df$steps = means$Steps
}
# first we will create a variable that stores ther mean value by each date
means <- tapply(df$steps, list(df$date), mean, na.rm = TRUE)
means
means[1]
means[1][1]
means[[1]]
means[1]
means[[1]]
names(means[[1]])
names(means)
names(means)[1]
names(means)[means[1]]
names(means)[means[3]]
# first we will create a variable that stores ther mean value by each date
means <- aggregate(df$steps, list(df$date), mean, na.rm = TRUE)
colnames(means) <- c("Date","Steps")
# Still there are some dates which do not have collected data at all on all intervals, so we will change it from NaN to 0
means$Steps[is.na(means$Steps)] = 0
# Now, we 'll assign the mean values to each NA val of df dataframe
df[is.na(df),]
df <- read.csv("activity.csv")
# Now, we 'll assign the mean values to each NA val of df dataframe
df[is.na(df),]
# Now, we 'll assign the mean values to each NA val of df dataframe
df[is.na(df),]
print("hi")
# Now, we 'll assign the mean values to each NA val of df dataframe
for(i in range(1,length(df))){
print("hi")
}
# Now, we 'll assign the mean values to each NA val of df dataframe
for(i in range(1,length(df))){
print("hi")
}
print("hi")
# Now, we 'll assign the mean values to each NA val of df dataframe
for(i in range(1,length(df))){
print("hi")
}
# Now, we 'll assign the mean values to each NA val of df dataframe
for(i in 1:ncol(df)){
print("hi")
}
library(scales)
```{r results= 'hide', echo = FALSE}
```{r echo = FALSE, results='hide'}
```{r libraries, echo = FALSE, results='hide'}
```{r,echo = FALSE, results='hide'}
```{r, echo = FALSE, results='hide'}
```{r, echo = FALSE, results='hide', warning=FALSE}
library(Hmisc)
install.package(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc"")
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
df$steps <- impute(x = df$steps, fun = mean)
if(!file.exists("activity.csv")){
unzip(zipfile = "activity.zip")
}
df <- read.csv("activity.csv")
```{r, echo = FALSE, results='hide', warning=FALSE, error=FALSE}
